[{"C:\\Users\\samul\\Ohjelmistoprojekti 1\\REACT\\frontlopputyo\\src\\reportWebVitals.js":"1","C:\\Users\\samul\\Ohjelmistoprojekti 1\\REACT\\frontlopputyo\\src\\App.js":"2","C:\\Users\\samul\\Ohjelmistoprojekti 1\\REACT\\frontlopputyo\\src\\components\\CustomerTable.js":"3","C:\\Users\\samul\\Ohjelmistoprojekti 1\\REACT\\frontlopputyo\\src\\components\\WorkoutTable.js":"4","C:\\Users\\samul\\Ohjelmistoprojekti 1\\REACT\\frontlopputyo\\src\\components\\Tabs.js":"5","C:\\Users\\samul\\Ohjelmistoprojekti 1\\REACT\\frontlopputyo\\src\\components\\AddCustomer.js":"6","C:\\Users\\samul\\Ohjelmistoprojekti 1\\REACT\\frontlopputyo\\src\\components\\EditCustomer.js":"7"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":742,"mtime":1606735783372,"results":"10","hashOfConfig":"9"},{"size":3708,"mtime":1607339696730,"results":"11","hashOfConfig":"9"},{"size":1663,"mtime":1606739514525,"results":"12","hashOfConfig":"9"},{"size":852,"mtime":1607340029725,"results":"13","hashOfConfig":"9"},{"size":3020,"mtime":1607334033836,"results":"14","hashOfConfig":"9"},{"size":3569,"mtime":1607339122094,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16mhs3s",{"filePath":"18","messages":"19","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\samul\\Ohjelmistoprojekti 1\\REACT\\frontlopputyo\\src\\reportWebVitals.js",[],"C:\\Users\\samul\\Ohjelmistoprojekti 1\\REACT\\frontlopputyo\\src\\App.js",["32","33","34","35","36","37","38","39","40"],"C:\\Users\\samul\\Ohjelmistoprojekti 1\\REACT\\frontlopputyo\\src\\components\\CustomerTable.js",["41"],"import { AgGridReact } from \"ag-grid-react/lib/agGridReact\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport \"ag-grid-community/dist/styles/ag-theme-material.css\";\r\nimport AddCustomer from \"./AddCustomer\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport EditCustomer from \"./EditCustomer\";\r\n\r\nfunction CustomerTable() {\r\n  const [customers, setCustomers] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getCustomers();\r\n  }, []);\r\n\r\n  const gridRef = useRef();\r\n\r\n  const getCustomers = () => {\r\n    fetch(\"https://customerrest.herokuapp.com/api/customers\")\r\n      .then((response) => response.json())\r\n      .then((data) => setCustomers(data.content))\r\n      .then(console.log(customers))\r\n      .catch((err) => console.error(err));\r\n  };\r\n\r\n  const addCustomer = (newCustomer) => {\r\n    fetch(\"https://customerrest.herokuapp.com/api/customers\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      body: JSON.stringify(newCustomer),\r\n    })\r\n      .then((_) => gridRef.current.refreshCells({ rowNodes: getCustomers() }))\r\n      .catch((err) => console.error(err));\r\n  };\r\n\r\n  const deleteCustomer = (link) => {\r\n    if (window.confirm(\"Are you sure?\")) {\r\n      fetch(link[0].href, {\r\n        method: \"DELETE\",\r\n      })\r\n        .then((_) => gridRef.current.refreshCells({ rowNodes: getCustomers() }))\r\n        .catch((err) => console.error(err));\r\n    }\r\n  };\r\n\r\n  const editCustomer = (link, customer) => {\r\n    fetch(link[0].href, {\r\n      method: \"PUT\",\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      body: JSON.stringify(customer),\r\n    })\r\n      .then((_) => gridRef.current.refreshCells({ rowNodes: getCustomers() }))\r\n      .catch((err) => console.error(err));\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      headerName: \"First Name\",\r\n      field: \"firstname\",\r\n      sortable: true,\r\n      filter: true,\r\n    },\r\n    {\r\n      headerName: \"Last Name\",\r\n      field: \"lastname\",\r\n      sortable: true,\r\n      filter: true,\r\n    },\r\n    {\r\n      headerName: \"Street Address\",\r\n      field: \"streetaddress\",\r\n      sortable: true,\r\n      filter: true,\r\n    },\r\n    {\r\n      headerName: \"Post Code\",\r\n      field: \"postcode\",\r\n      sortable: true,\r\n      filter: true,\r\n    },\r\n    {\r\n      headerName: \"City\",\r\n      field: \"city\",\r\n      sortable: true,\r\n      filter: true,\r\n    },\r\n    {\r\n      headerName: \"E-Mail\",\r\n      field: \"email\",\r\n      sortable: true,\r\n      filter: true,\r\n    },\r\n    {\r\n      headerName: \"Phone Number\",\r\n      field: \"phone\",\r\n      sortable: true,\r\n      filter: true,\r\n    },\r\n    {\r\n      headerName: \"\",\r\n      field: \"links\",\r\n      cellRendererFramework: (params) => (\r\n        <Button\r\n          color=\"secondary\"\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          onClick={() => deleteCustomer(params.value)}\r\n        >\r\n          Delete\r\n        </Button>\r\n      ),\r\n    },\r\n    {\r\n      headerName: \"\",\r\n      field: \"links\",\r\n      cellRendererFramework: (params) => (\r\n        <EditCustomer\r\n          editCustomer={editCustomer}\r\n          params={params}\r\n        ></EditCustomer>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <AddCustomer addCustomer={addCustomer}></AddCustomer>\r\n      <div\r\n        className=\"ag-theme-material\"\r\n        style={{ height: \"700px\", width: \"90%\", margin: \"auto\" }}\r\n      >\r\n        <AgGridReact\r\n          columnDefs={columns}\r\n          rowData={customers}\r\n          ref={gridRef}\r\n          onGridReady={(params) => {\r\n            gridRef.current = params.api;\r\n          }}\r\n        ></AgGridReact>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default CustomerTable;\r\n","C:\\Users\\samul\\Ohjelmistoprojekti 1\\REACT\\frontlopputyo\\src\\components\\WorkoutTable.js",["42"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport \"ag-grid-community/dist/styles/ag-theme-material.css\";\r\nimport { AgGridReact } from \"ag-grid-react/lib/agGridReact\";\r\nimport moment from 'moment'\r\n\r\nfunction WorkoutTable() {\r\n  const [workouts, setWorkouts] = useState([])\r\n\r\n  useEffect(() => {\r\n    getTrainings();\r\n  }, []);\r\n\r\n  const getTrainings = () => {\r\n    fetch(\"https://customerrest.herokuapp.com/gettrainings\")\r\n    \r\n      .then((response) => response.json())\r\n      .then((data) => setWorkouts(data));\r\n  };\r\n  const columns = [\r\n    {\r\n      headerName: \"Date\",\r\n      field: \"date\",\r\n      cellRenderer: (data) => { return moment(data.value).format(\"MM/DD/YYYY HH:mm\");},\r\n      sortable: true,\r\n      filter: true,\r\n    },\r\n    {\r\n      headerName: \"Duration\",\r\n      field: \"duration\",\r\n      sortable: true,\r\n      filter: true,\r\n    },\r\n    {\r\n      headerName: \"Activity\",\r\n      field: \"activity\",\r\n      sortable: true,\r\n      filter: true,\r\n    },\r\n    {\r\n      headerName: \"Customer\",\r\n      field: \"customer.firstname\",\r\n      sortable: true,\r\n      filter: true,\r\n      width: 150\r\n    },\r\n    {\r\n        headerName: \"\",\r\n        field: \"customer.lastname\",\r\n        sortable: true,\r\n        filter: true,\r\n        width: 150\r\n      },\r\n  ];\r\n  return (\r\n    <div>\r\n      <div\r\n        className=\"ag-theme-material\"\r\n        style={{ height: \"700px\", width: \"90%\", margin: \"auto\" }}\r\n      >\r\n        <AgGridReact columnDefs={columns} rowData={workouts} suppressCellSelection=\"true\"></AgGridReact>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default WorkoutTable;\r\n","C:\\Users\\samul\\Ohjelmistoprojekti 1\\REACT\\frontlopputyo\\src\\components\\Tabs.js",[],"C:\\Users\\samul\\Ohjelmistoprojekti 1\\REACT\\frontlopputyo\\src\\components\\AddCustomer.js",[],"C:\\Users\\samul\\Ohjelmistoprojekti 1\\REACT\\frontlopputyo\\src\\components\\EditCustomer.js",[],{"ruleId":"43","severity":1,"message":"44","line":4,"column":8,"nodeType":"45","messageId":"46","endLine":4,"endColumn":21},{"ruleId":"43","severity":1,"message":"47","line":5,"column":8,"nodeType":"45","messageId":"46","endLine":5,"endColumn":14},{"ruleId":"43","severity":1,"message":"48","line":6,"column":8,"nodeType":"45","messageId":"46","endLine":6,"endColumn":12},{"ruleId":"43","severity":1,"message":"49","line":7,"column":8,"nodeType":"45","messageId":"46","endLine":7,"endColumn":16},{"ruleId":"43","severity":1,"message":"50","line":9,"column":20,"nodeType":"45","messageId":"46","endLine":9,"endColumn":26},{"ruleId":"43","severity":1,"message":"51","line":10,"column":3,"nodeType":"45","messageId":"46","endLine":10,"endColumn":9},{"ruleId":"43","severity":1,"message":"52","line":11,"column":3,"nodeType":"45","messageId":"46","endLine":11,"endColumn":8},{"ruleId":"43","severity":1,"message":"53","line":12,"column":3,"nodeType":"45","messageId":"46","endLine":12,"endColumn":7},{"ruleId":"43","severity":1,"message":"54","line":13,"column":3,"nodeType":"45","messageId":"46","endLine":13,"endColumn":16},{"ruleId":"55","severity":1,"message":"56","line":14,"column":6,"nodeType":"57","endLine":14,"endColumn":8,"suggestions":"58"},{"ruleId":"43","severity":1,"message":"59","line":1,"column":38,"nodeType":"45","messageId":"46","endLine":1,"endColumn":44},"no-unused-vars","'CustomerTable' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Menu' is defined but never used.","'MenuItem' is defined but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'BrowserRouter' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCustomers'. Either include it or remove the dependency array.","ArrayExpression",["60"],"'useRef' is defined but never used.",{"desc":"61","fix":"62"},"Update the dependencies array to be: [getCustomers]",{"range":"63","text":"64"},[500,502],"[getCustomers]"]